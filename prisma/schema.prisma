datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Word {
  id Int @id @default(autoincrement())

  word        String
  translation String

  pos         String?
  description String?

  frequencyCategory  FrequencyCategory?  @map("frequency_category")
  registerCategory   RegisterCategory?   @map("register_category")
  difficultyCategory DifficultyCategory? @map("difficulty_category")

  wordProgress     WordProgress?
  categories       Category[]
  examples         Example[]
  practiceAttempts PracticeAttempt[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("words")
}

enum FrequencyCategory {
  Common
  Uncommon
  Rare
}

enum RegisterCategory {
  Formal
  Informal
  Colloquial
  Slang
  Technical
}

enum DifficultyCategory {
  Beginner
  Intermediate
  Advanced
}

model Example {
  id Int @id @default(autoincrement())

  original    String
  translation String

  word   Word @relation(fields: [wordId], references: [id], onDelete: Cascade)
  wordId Int  @map("word_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("examples")
}

model Category {
  id Int @id @default(autoincrement())

  name String @unique

  words Word[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts Account[]
  sessions Session[]

  words            Word[]
  wordProgress     WordProgress[]
  practiceSessions PracticeSession[]
  practiceAttempts PracticeAttempt[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Account {
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

// https://linear.app/well-then/issue/WLTH-106/wordprogress-can-be-missed-when-creating-word
model WordProgress {
  id Int @id @default(autoincrement())

  algorithm Algorithm @default(SM2)

  lastReviewDate DateTime? @map("last_review_date")
  nextReviewDate DateTime? @map("next_review_date")

  easeFactor Float @default(2.5) @map("ease_factor")
  interval   Int   @default(0)

  learningStep Int   @default(0) @map("learning_step")
  phase        Phase @default(Learning)

  word   Word @relation(fields: [wordId], references: [id], onDelete: Cascade)
  wordId Int  @unique @map("word_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  practiceAttempts PracticeAttempt[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([wordId, userId])
  @@index([userId, nextReviewDate])
  @@map("word_progress")
}

enum Algorithm {
  SM2
}

enum Phase {
  Learning
  Review
  Relearning
}

model PracticeAttempt {
  id Int @id @default(autoincrement())

  reviewDate   DateTime     @default(now()) @map("review_date")
  grade        Int
  phase        Phase        @default(Learning)
  reviewMethod ReviewMethod @default(FullTyping) @map("review_method")

  input String?

  // responseTime Int? @map("response_time")
  // streak       Int          @default(0)
  // HintUsed - boolean

  wordProgress   WordProgress @relation(fields: [wordProgressId], references: [id], onDelete: Cascade)
  wordProgressId Int          @map("word_progress_id")

  word   Word @relation(fields: [wordId], references: [id], onDelete: Cascade)
  wordId Int  @map("word_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  practiceSession   PracticeSession? @relation(fields: [practiceSessionId], references: [id])
  practiceSessionId String?          @map("practice_session_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // why this index
  @@index([wordProgressId, reviewDate])
  @@map("practice_attempts")
}

enum ReviewMethod {
  FullTyping
}

model PracticeSession {
  id String @id @default(cuid())

  size      Int?    @default(10)
  words     Int[]
  completed Boolean @default(false)

  phase        Phase[]
  practiceType PracticeSessionType[]

  practiceAttempts PracticeAttempt[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

enum PracticeSessionType {
  New
  Review
}
